namespace org.z2legacy.bench;

using sys.core.StopWatch;
using sys.core.ConvertUtf8;

/*
#include <stdlib.h>
#include <stdio.h>
*/

class BenchIntToString {
	const TIMES = 100000000;
	const TEST_VAL = 123456789;
	
	static def test_itoa(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			/*
			itoa(123456789, (char*)b, 10);
			*/
		}
	}
	
	static def test_itoa_hex(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			/*
			itoa(123456789, (char*)b, 16);
			*/
		}
	}
	
	static def test_sprintf(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			/*
			sprintf((char*)b, "%d", 123456789);
			*/
		}
	}
	
	static def test_sprintf_hex(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			/*
			sprintf((char*)b, "%x", 123456789);
			*/
		}
	}
	
	static def test_roundtrip(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			val s = Slice<Byte>{b};
			ConvertUtf8.IntAsText(s, TEST_VAL);
			
			val z = ReadSlice<Byte>{b};
			val d = ConvertUtf8.ParseSig<Int>(z);
			
			System.Trace.Assert(d == TEST_VAL);
			System.Trace.Assert(s.Length == z.Length);
		}
	}
		
	static def test_ToArray(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			val s = Slice<Byte>{b};
			sys.core.ConvertUtf8.IntAsText(s, TEST_VAL);
		}
	}
	
	static def test_ToArrayDec(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			val s = Slice<Byte>{b};
			ConvertUtf8.IntAsText(s, TEST_VAL, 10);
		}
	}
	
	static def test_ToArrayHex(ref b: CArray<Byte>) {
		for (val i = 0; i < TIMES; i++) {
			val s = Slice<Byte>{b};
			ConvertUtf8.IntAsText(s, TEST_VAL, 16);
		}
	}
	
	static def runTests() {
		{
			val sw = StopWatch{};
			test_itoa(buffa);
			System.Out << test_itoa.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_itoa_hex(buffb);
			System.Out << test_itoa_hex.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_sprintf(buffc);
			System.Out << test_sprintf.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_sprintf_hex(buffd);
			System.Out << test_sprintf_hex.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_roundtrip(buffe);
			System.Out << test_roundtrip.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_ToArray(bufff);
			System.Out << test_ToArray.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_ToArrayDec(buffg);
			System.Out << test_ToArrayDec.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
		{
			val sw = StopWatch{};
			test_ToArrayHex(buffh);
			System.Out << test_ToArrayHex.Name << " finished in " << sw.Elapsed() / 1000 << " sec.\n";
		}
	}
	
	// atoi
	static val buffa = CArray<Byte, 32>{};
	static val buffb = CArray<Byte, 32>{};
	// sprintf
	static val buffc = CArray<Byte, 32>{};
	static val buffd = CArray<Byte, 32>{};
	// ToArray
	static val buffe = CArray<Byte, 32>{};
	static val bufff = CArray<Byte, 32>{};
	static val buffg = CArray<Byte, 32>{};
	static val buffh = CArray<Byte, 32>{};
	
	def @main() {
		runTests();
	}
}