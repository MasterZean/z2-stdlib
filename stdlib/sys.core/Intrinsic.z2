namespace sys.core.lang;

class Intrinsic {
	static def Min<T: Class>(a: T, b: T): T {
		return a >= b ? b : a;
	}

	static def Max<T: Class>(a: T, b: T): T {
		return a <= b ? b : a;
	}

	static def Clamped<T: Class>(a: T, min: T, max: T): T {
		System.Debug.Assert(min <= max);

		if (a <= min)
			return min;
		else if (a >= max)
			return max;
		else
			return a;
	}

	static def Clamp<T: Class>(ref a: T, min: T, max: T) {
		System.Debug.Assert(min <= max);

		if (a <= min)
			a = min;
		else if (a >= max)
			a = max;
	}

	static def MemCopy(destination: Ptr<Byte>, source: Ptr<Byte>, bytes: PtrSize) = bind.c.string.memcpy;
	static def CStrLen(source: Ptr<Byte>): PtrSize = bind.c.string.strlen;
	
	static def CpuID(ref cpu: CArray<Int>, val level: Int) {
		__cpuid(cpu.SysDataPointer, level);
	}
}
private {
	@[bindc] static def __cpuid(cpu: Ptr<Int>, level: Int);
}
