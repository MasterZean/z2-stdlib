namespace sys.core.lang;

using sys.core.SystemCPU;

#if Compiler.Platform == "WIN32"
using microsoft.windows.Win32;
#else
using ieee.posix.Posix;
#endif

class System {
	static val Debug = sys.core.SystemDebug{};
	static val Trace = sys.core.SystemTrace{};
	
	static property CPU: ref SystemCPU {
		if (cpuRead == false) {
			GetCPU();
			cpuRead = true;
		}
		
		return cpu;
	}
			

#if Compiler.Platfrom == "WIN32"

    static val Out = sys.core.ConsoleStream{Win32.GetStdHandle(Win32.STD_OUTPUT_HANDLE)};
    static val In = sys.core.ConsoleStream{Win32.GetStdHandle(Win32.STD_INPUT_HANDLE)};
    
	static def @setup() {
		SetConsoleCodePage();
	}
		
	static def GetEnvVariable(var: String): String {
		val sourceVar = Slice<Byte>{var};
		val varu16: CArray<Word, 32767> = void;
		val destVar = Slice<Word>{varu16};
		
		sys.core.ConvertUtf16.FromUtf8(destVar, sourceVar);
		varu16[destVar.Length] = 0;
		
		val buffu16: CArray<Word, 32767> = void;
		val count = 0u;
		
		count = Win32.GetEnvironmentVariableW(varu16.SysDataPointer, buffu16.SysDataPointer, buffu16.Length);
		
		val buffu8: CArray<Byte, buffu16.Length * 4> = void;
		
		val source = Slice<Word>{buffu16, PtrSize{count}};
		val dest = Slice<Byte>{buffu8};
		
		sys.core.ConvertUtf8.FromUtf16(dest, source);
		
		if (count > 0)
			return String{buffu8, dest.Length};
		else {
			return String{};
		}
	}
	
	static def GetCPUPS() {
		cpu.Bits = 32;
		val envArch = GetEnvVariable("PROCESSOR_ARCHITECTURE");
		if (envArch == "x86") {
			val envArchEx = GetEnvVariable("PROCESSOR_ARCHITEW6432");
			if (envArchEx == "AMD64" || envArchEx == "IA64")
				cpu.Bits = 64;
		}
		else if (envArch == "AMD64" || envArch == "IA64")
			cpu.Bits = 64;
		
		
		cpu.Cores = 1;
		val cores = GetEnvVariable("NUMBER_OF_PROCESSORS");
		if (cores.Length != 0)
		    cpu.Cores = cores.Parse<Int>();
	}
	
#else

    static val Out = sys.core.ConsoleStream{};
    
	static def @setup() {
	}
	
	static def GetEnvVariable(var: String): String {
		val env = Posix.getenv(var.SysDataPointer);
		
		if (env != null)
			return String{env, bind.c.string.strlen(env)};
		else
			return "";
	}
	
	static def GetCPUPS() {
		cpu.Bits = Int{Posix.sysconf(107)};
		cpu.Cores = Posix.get_nprocs();
	}
	
#endif

	static property Args: const ref Vector<String> {
		return args;
	}
	
	@[system]
	static def AddArgument(arg: String) {
		args << arg;
	}

}
private {
	static val cpu = SystemCPU{};
	static val cpuRead = false;
	static val args = Vector<String>{};
	
	static def GetCPU() {
		val cpudata = CArray[0, 0, 0, 0];
		Intrinsic.CpuID(cpudata, 0);
		
		val vendor = CArray[0, 0, 0, 0];
		vendor[0] = cpudata[1];
		vendor[1] = cpudata[3];
		vendor[2] = cpudata[2];
		
		val p = Ptr<Byte>{vendor.SysDataPointer};
		cpu.Vendor = String{p, Intrinsic.CStrLen(p)};
		
		Intrinsic.CpuID(cpudata, 1);
		cpu.MMX   = ((cpudata[3] >> 23) & 0x1) != 0;
		cpu.SSE   = ((cpudata[3] >> 25) & 0x1) != 0;
		cpu.SSE2  = ((cpudata[3] >> 26) & 0x1) != 0;
		cpu.SSE3  = ((cpudata[2]) & 0x1) != 0;
		cpu.SSSE3 = ((cpudata[2] >> 9) & 0x1) != 0;
		cpu.SSE41 = ((cpudata[2] >> 19) & 0x1) != 0;
		cpu.SSE42 = ((cpudata[2] >> 20) & 0x1) != 0;
		
		GetCPUPS();
	}
	
#if Compiler.Platform == "WIN32"

	static def SetConsoleCodePage() {
		Win32.SetConsoleOutputCP(Win32.CP_UTF8);
	}
	
#else

	static def SetConsoleCodePage() {
	}
	
#endif

}