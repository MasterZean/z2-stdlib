using sys.core.Stream;

namespace sys.core.lang;

class CArray<T: Class> {
	this() {
		for (val i = 0p; i < Length; i++)
			this[i]{};
	}
	
	this(const item: T) {
		for (val i = 0p; i < Length; i++)
			this[i]{item};
	}
	
	property IsEmpty: Bool {
		return false;
	}
	
	def Fill(const value: T) {
		for (val i = 0p; i < Length; i++)
			this[i] = value;
	}
	
	def Insert(pos: PtrSize, const item: T) {
		System.Debug.Assert(pos < Length);
		
		for (val i = Length - 1; i >= pos + 1; i--)
			this[i] = this[i - 1];
		
		this[pos] = item;
	}
	
	def Delete(pos: PtrSize) {
		System.Debug.Assert(pos < Length);
		
		for (val i = pos; i < Length - 1; i++)
			this[i] = this[i + 1];
		
		this[Length - 1]{};
	}
	
	def FindIndex(const item: T): PtrSize {
		val s = Slice<T>{this};
		return s.FindIndex(item);
	}
	
	def FindIndex(const item: T, start: PtrSize): PtrSize {
		val s = Slice<T>{this};
		return s.FindIndex(item, start);
	}
	
	def BinaryIndex(const item: T): PtrSize {
		val s = Slice<T>{this};
		return s.BinaryIndex(item);
	}
	
	def Reverse() {
		val s = Slice<T>{this};
		s.Reverse();
	}
	
#region IO

	def @write(ref stream: Stream); const {
		if (Length > 0) {
			for (val i = 0p; i < Length - 1; i++) {
				stream.RawWrite(this[i]);
				stream.RawWrite(' ');
			}
			stream.RawWrite(this[Length - 1]);
		}
	}
	
#endregion
}