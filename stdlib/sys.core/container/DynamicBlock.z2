namespace sys.core;

class DynamicBlock<T: Class> {
	this(a: PtrSize) {
		length = a;
		
		// allocate an empty memory block that is large enough
		data = data.AllocVoid(length);
		
		// call constructor on each element
		for (val i = 0p; i < length; i++)
			data[i]{};
	}

#region manager

	this(const copy: DynamicBlock<T>) {
		length = copy.length;
		
		if (T.class.IsPOD) {
			// POD data can just be raw copied by a memory clone
			data = copy.data.Clone(length);
		}
		else {
			// non POD data gets copied by first allocating a new buffer
			data = Ptr<T>.AllocVoid(length);
			
			// then copy constructor is called on each member
			for (val i = 0p; i < length; i++)
				data[i]{copy.data[i]};
		}
	}

	def @attr(const copy: DynamicBlock<T>) {
		// exit early if assigning to self
		if (data == copy.data)
			return;

		// call destructor on non POD elements
		if (!T.class.IsPOD)
			for (val i = 0p; i < length; i++)
				data[i].~{};
		data.Free();

		// forward to copy constructor
		this{copy};
	}

	~this() {
		// call destructor on non POD elements
		if (!T.class.IsPOD)
			for (val i = 0p; i < length; i++)
				data[i].~{};
		data.Free();

		length = 0;
	}

#endregion

	property @index: T
	get [index: PtrSize] const {
		System.Debug.Assert(index < length);
		return data[index];
	}
	set (value)[index: PtrSize] {
		System.Debug.Assert(index < length);
		data[index] = value;
	}

	property Length: PtrSize {
		return length;
	}
	set (newLength) {
		if (newLength == length)
			return;
		
		// TODO: investigate if implementation is not too aggressive?
		SetLengthNoInitAggressive(newLength);

		// if newLength > old length, call constructor on new elements
		for (val i = length; i < newLength; i++)
			data[i]{};
			
		length = newLength;
	}

	property IsEmpty: Bool {
		return length == 0;
	}
	
	property Capacity: PtrSize {
		return length;
	}

	def ExpandTo(value: PtrSize) {
		if (value > length)
			Length = value;
	}
	
	def ExpandTo(newLength: PtrSize, const init: T) {
		if (newLength > length) {
			SetLengthNoInitAggressive(newLength);

			// if newLength > old length, call constructor on new elements
			for (val i = length; i < newLength; i++)
				data[i]{init};
				
			length = newLength;
		}
	}

	def ExpandBy(delta: PtrSize) {
		Length = length + delta;
	}
	
	def ExpandBy(delta: PtrSize, const init: T) {
		val newLength = length + delta;
		SetLengthNoInitAggressive(newLength);

		// if newLength > old length, call constructor on new elements
		for (val i = length; i < newLength; i++)
			data[i]{init};
			
		length = newLength;
	}
	
	def ShrinkTo(newLength: PtrSize) {
		if (newLength < length)
			Length = newLength;
	}

	def ShrinkBy(delta: PtrSize) {
		if (length - delta < delta)
			Length = length - delta;
		else
			Length = 0;
	}
	
	def Fill(const value: T) {
		for (val i = 0p; i < length; i++)
			data[i] = value;
	}

	def Clear() {
		~this();
	}
		
	def Append(const item: T) {
		val newLength = length + 1;
		SetLengthNoInitAggressive(newLength);
		data[length]{item};
		length = newLength;
	}

	def Append(const item: T, count: PtrSize) {
		val newLength = length + count;
		SetLengthNoInitAggressive(newLength);
		for (val i = length; i < newLength; i++)
			data[i]{item};
		length = newLength;
	}
	
#region unsafe

	def SetLengthUnsafe(value: PtrSize) {
		if (value == length)
			return;

		val temp = data;

		data = data.Clone(value, length);

		temp.Free();

		length = value;
	}
	
	def ExpandUnsafe(value: PtrSize) {
		if (value > length)
			SetLengthUnsafe(value);
	}
	
	def ShrinkUnsafe(value: PtrSize) {
		if (value < length)
			SetLengthUnsafe(value);
	}

#endregion

}
private {
	val length: PtrSize;
	val data: Ptr<T>;

	def SetLengthNoInit(newLength: PtrSize) {
		// TODO: re-implement with realloc for potential performance gain?
		
		val temp = data;

		if (T.class.IsPOD) {
			data = data.Clone(newLength, length);
			temp.Free();
		}
		else {
			data = Ptr<T>.AllocVoid(newLength);
			for (val i = 0p; i < length; i++) {
				data[i]{temp[i]};
				temp[i].~{};
			}
			temp.Free();
		}
	}
	
	def SetLengthNoInitAggressive(newLength: PtrSize) {
		// TODO: re-implement with realloc for potential performance gain?
		
		val temp = data;
		
		// clone data to a new memory block
		data = data.Clone(newLength, length);
		
		// call destructor on old non POD data on a shrink
		if (!T.class.IsPOD)
			for (val i = newLength; i < length; i++)
				temp[i].~{};

		// free old memory buffer
		temp.Free();
	}
}