namespace sys.core.lang;

class ReadSlice<T: Class> {
	this() = null;
	
	this(ref const p: CArray<T>) {
		ptr = p.SysDataPointer;
		size = p.Length;
	}
	
	this(ref const p: CArray<T>, length: PtrSize) {
		ptr = p.SysDataPointer;
		size = length;
	}
	
	this(ref const p: CArray<T>, start: PtrSize, end: PtrSize) {
		ptr = p.SysDataPointer + start;
		size = end - start + 1;
	}
	
	this(ref const p: Vector<T>) {
		ptr = p.SysDataPointer;
		size = p.Length;
	}
	
	this(ref const p: Vector<T>, length: PtrSize) {
		ptr = p.SysDataPointer;
		size = length;
	}
	
	this(ref const p: Vector<T>, start: PtrSize, end: PtrSize) {
		ptr = p.SysDataPointer + start;
		size = end - start + 1;
	}
	
	this(ref const p: Small) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Small, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Short) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Short, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Byte) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Byte, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Word) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Word, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Int) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Int, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Long) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Long, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: DWord) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: DWord, length: PtrSize) {
		//System.Out << "aa\n";
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: QWord) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: QWord, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Float) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Float, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Double) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Double, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: Char) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref const p: Char, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref const p: String) {
		ptr = p.SysDataPointer;
		size = p.Length;
	}
	
	this(ref const p: ReadSlice<Byte>, length: PtrSize) {
		ptr = p.SysDataPointer;
		size = length;
	}
	
	this(ref const p: ReadSlice<Byte>, offset: PtrSize, length: PtrSize) {
		ptr = p.SysDataPointer + offset;
		size = length;
	}
	
	property Length: PtrSize {
		return size;
	}
	set (value) {
		size = value;
	}
	
	property @index: T
	get [index: PtrSize] {
		System.Debug.Assert(index < size);
		return ptr[index];
	}
	set (byte)[index: PtrSize] {
		System.Debug.Assert(index < size);
		ptr[index] = byte;
	}
	
	property SysDataPointer: Ptr<T>
	get {
		return ptr;
	}
	
	func FindIndex(item: T): PtrSize {
		for (val i = 0p; i < size; i++)
			if (ptr[i] == item)
				return i;
			
		return PtrSize{-1};
	}
	
	func FindIndex(item: T, start: PtrSize): PtrSize {
		val s = Intrinsic.Min(start, size - 1);
		
		for (val i = s; i < size; i++)
			if (ptr[i] == item)
				return i;
			
		return PtrSize{-1};
	}
	
	func FindIndex(b: CArray<T>): PtrSize {
		for (val i = 0p; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func FindIndex(b: Vector<T>): PtrSize {
		for (val i = 0p; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func FindIndex(b: CArray<T>, start: PtrSize): PtrSize {
		val s = Intrinsic.Min(start, size - 1);
		
		for (val i = s; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func FindIndex(b: Vector<T>, start: PtrSize): PtrSize {
		val s = Intrinsic.Min(start, size - 1);
		
		for (val i = s; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(item: T): PtrSize {
		for (val i = size - 1; i != -1; i--)
			if (ptr[i] == item)
				return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(item: T, val start: PtrSize): PtrSize {
		if (start == 0)
			start = PtrSize{-1};
		else if (start >= size)
			start = size - 1;
		
		for (val i = size - 1; i != start; i--)
			if (ptr[i] == item)
				return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: CArray<T>): PtrSize {
		for (val i = size - 1; i != -1; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: Vector<T>): PtrSize {
		for (val i = size - 1; i != -1; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: CArray<T>, val start: PtrSize): PtrSize {
		if (start == 0)
			start = PtrSize{-1};
		else if (start >= size)
			start = size - 1;
		
		for (val i = size - 1; i != start; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: Vector<T>, val start: PtrSize): PtrSize {
		if (start == 0)
			start = PtrSize{-1};
		else if (start >= size)
			start = size - 1;
		
		for (val i = size - 1; i != start; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func BinaryIndex(item: T): PtrSize {
		val lowerBound = 0p;
		val upperBound = size - 1;
		
		while (lowerBound <= upperBound) {
			val midPoint = lowerBound + (upperBound - lowerBound) / 2;
		
			if (ptr[midPoint] == item)
				return midPoint;
			else if(ptr[midPoint] < item)
				lowerBound = midPoint + 1;
			else
				upperBound = midPoint -1;
		}
		
		return PtrSize{-1};
	}
	
	func BinaryIndex(item: T, start: PtrSize): PtrSize {
	    if (ptr[start] > item)
	        return -1;
	    
		val lowerBound = start;
		val upperBound = size - 1;
		
		while (lowerBound <= upperBound) {
			val midPoint = lowerBound + (upperBound - lowerBound) / 2;
		
			if (ptr[midPoint] == item)
				return midPoint;
			else if (ptr[midPoint] < item)
				lowerBound = midPoint + 1;
			else
				upperBound = midPoint -1;
		}
		
		return -1;
	}
	
	func Sum(): T {
		val sum: T = ptr[0];
		
		for (val i = 1p; i < Length; i++)
			sum += ptr[i];
		
		return sum;
	}
}
private {
	val ptr: Ptr<T>;
	val size: PtrSize;
}
