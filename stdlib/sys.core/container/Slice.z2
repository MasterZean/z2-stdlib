namespace sys.core.lang;

class Slice<T: Class> {
	this(ref ppp: CArray<T>) {
		ptr = ppp.SysDataPointer;
		size = ppp.Length;
	}
	
	this(ref p: CArray<T>, length: PtrSize) {
		ptr = p.SysDataPointer;
		size = length;
	}
	
	this(ref p: CArray<T>, start: PtrSize, end: PtrSize) {
		ptr = p.SysDataPointer + start;
		size = end - start + 1;
	}
	
	this(ref p: Vector<T>) {
		ptr = p.SysDataPointer;
		size = p.Length;
	}
	
	this(ref p: Vector<T>, length: PtrSize) {
		ptr = p.SysDataPointer;
		size = length;
	}
	
	this(ref p: Vector<T>, start: PtrSize, end: PtrSize) {
		ptr = p.SysDataPointer + start;
		size = end - start + 1;
	}
	
	this(ref p: Small) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Short) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Byte) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Word) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Int) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Int, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref p: Long) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Long, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref p: DWord) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: DWord, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref p: QWord) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: QWord, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref p: Float) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Float, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref p: Double) {
		ptr = Ptr<T>{p};
		size = p.@size / T.@size;
	}
	
	this(ref p: Double, length: PtrSize) {
		ptr = Ptr<T>{p};
		size = Intrinsic.Min(p.@size / T.@size, length);
	}
	
	this(ref p: String) {
		ptr = p.SysDataPointer;
		size = p.Length;
	}
	
	this(p: Slice<Byte>, length: PtrSize) {
		ptr = p.SysDataPointer;
		size = length;
	}
	
	this(p: Slice<Byte>, offset: PtrSize, length: PtrSize) {
		ptr = p.SysDataPointer + offset;
		size = length;
	}
	
	property Length: PtrSize
	get const {
		return size;
	}
	set (value) {
		size = value;
	}
	
	property @index: T
	get [index: PtrSize] const {
		System.Debug.Assert(index < size);
		return ptr[index];
	}
	set (byte)[index: PtrSize] {
		System.Debug.Assert(index < size);
		ptr[index] = byte;
	}
	
	property SysDataPointer: Ptr<T>
	get {
		return ptr;
	}
	
	def Fill(value: T) {
		for (val i = 0p; i < size; i++)
			ptr[i] = value;
	}
	
	def Fill(items: Vector<T>) {
		val subIndex = 0p;
		for (val i = 0p; i < size; i++) {
			ptr[i] = items[subIndex++];
			if (subIndex >= items.Length)
				subIndex = 0p;
		}
	}
	
	def Fill(items: CArray<T>) {
		val subIndex = 0p;
		for (val i = 0p; i < size; i++) {
			ptr[i] = items[subIndex++];
			if (subIndex >= items.Length)
				subIndex = 0p;
		}
	}
	
	func FindIndex(item: T): PtrSize {
		for (val i = 0p; i < size; i++)
			if (ptr[i] == item)
				return i;
			
		return PtrSize{-1};
	}
	
	func FindIndex(item: T, start: PtrSize): PtrSize {
		val s = Intrinsic.Min(start, size - 1);
		
		for (val i = s; i < size; i++)
			if (ptr[i] == item)
				return i;
			
		return PtrSize{-1};
	}
	
	func FindIndex(b: CArray<T>): PtrSize {
		for (val i = 0p; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func FindIndex(b: Vector<T>): PtrSize {
		for (val i = 0p; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func FindIndex(b: CArray<T>, start: PtrSize): PtrSize {
		val s = Intrinsic.Min(start, size - 1);
		
		for (val i = s; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func FindIndex(b: Vector<T>, start: PtrSize): PtrSize {
		val s = Intrinsic.Min(start, size - 1);
		
		for (val i = s; i < size; i++)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(item: T): PtrSize {
		for (val i = size - 1; i != -1; i--)
			if (ptr[i] == item)
				return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(item: T, val start: PtrSize): PtrSize {
		if (start == 0)
			start = PtrSize{-1};
		else if (start >= size)
			start = size - 1;
		
		for (val i = size - 1; i != start; i--)
			if (ptr[i] == item)
				return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: CArray<T>): PtrSize {
		for (val i = size - 1; i != -1; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: Vector<T>): PtrSize {
		for (val i = size - 1; i != -1; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: CArray<T>, val start: PtrSize): PtrSize {
		if (start == 0)
			start = PtrSize{-1};
		else if (start >= size)
			start = size - 1;
		
		for (val i = size - 1; i != start; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func RFindIndex(b: Vector<T>, val start: PtrSize): PtrSize {
		if (start == 0)
			start = PtrSize{-1};
		else if (start >= size)
			start = size - 1;
		
		for (val i = size - 1; i != start; i--)
			for (val j = 0p; j < b.Length; j++)
				if (ptr[i] == b[j])
					return i;
		
		return PtrSize{-1};
	}
	
	func BinaryIndex(item: T): PtrSize {
		val lowerBound = 0p;
		val upperBound = size - 1;
		
		while (lowerBound <= upperBound) {
			val midPoint = lowerBound + (upperBound - lowerBound) / 2;
		
			if (ptr[midPoint] == item)
				return midPoint;
			else if(ptr[midPoint] < item)
				lowerBound = midPoint + 1;
			else
				upperBound = midPoint -1;
		}
		
		return PtrSize{-1};
	}
	
	func BinaryIndex(item: T, start: PtrSize): PtrSize {
	    if (ptr[start] > item)
	        return -1;
	    
		val lowerBound = start;
		val upperBound = size - 1;
		
		while (lowerBound <= upperBound) {
			val midPoint = lowerBound + (upperBound - lowerBound) / 2;
		
			if (ptr[midPoint] == item)
				return midPoint;
			else if (ptr[midPoint] < item)
				lowerBound = midPoint + 1;
			else
				upperBound = midPoint -1;
		}
		
		return -1;
	}
	
	def Reverse() {
		val upperBound = size - 1;
		val mid = upperBound / 2;
		
		for (val i = 0p; i <= mid; i++)
			Swap(ptr[i], ptr[upperBound - i]);
	}
	
	def Delete(item: T): PtrSize {
		val index = FindIndex(item);
		
		if (index == -1)
			return 0;
		
		ptr[index].~{};
		
		for (val i = index; i < size - 1; i++)
			ptr[i]{move(ptr[i+ 1])};
		
		size--;
		return 1p;
	}
	
	def Delete(items: CArray<T>): PtrSize {
		val count = 0p;
		
		foreach (v in items)
			count += Delete(v);
			
		return count;
	}
	
	def Delete(items: Vector<T>): PtrSize {
		val count = 0p;
		
		foreach (v in items)
			count += Delete(v);
			
		return count;
	}
		
	def DeleteAll(item: T): PtrSize {
		val count = 0p;
		
		while (true) {
			val index = FindIndex(item);
			
			if (index == -1)
				return count;
			
			ptr[index].~{};
			
			for (val i = index; i < size - 1; i++)
				ptr[i]{move(ptr[i+ 1])};
			
			size--;
			count++;
		}
		
		return count;
	}
	
	def DeleteAll(items: CArray<T>): PtrSize {
		val count = 0p;
		
		foreach (v in items)
			count += DeleteAll(v);
		
		return count;
	}
	
	def DeleteAll(items: Vector<T>): PtrSize {
		val count = 0p;
		
		foreach (v in items)
			count += DeleteAll(v);
			
		return count;
	}
	
	def DeleteIndex(index: PtrSize): PtrSize {
		if (index == -1 || index >= size)
			return 0;
		
		ptr[index].~{};
		
		for (val i = index; i < size - 1; i++)
			ptr[i]{move(ptr[i+ 1])};
		
		size--;
		return 1p;
	}
	
	def DeleteIndex(items: CArray<PtrSize>): PtrSize {
		val count = 0p;
		
		foreach (v in items)
			count += DeleteIndex(v - count);
		
		return count;
	}
	
	def DeleteIndex(items: Vector<PtrSize>): PtrSize {
		val count = 0p;
		
		foreach (v, i in items)
			count += DeleteIndex(v - count);
			
			
		return count;
	}
	
	def Insert(pos: PtrSize, item: T) {
		for (val i = size; i >= pos + 1; i--)
			ptr[i]{move(ptr[i - 1])};
		
		ptr[pos] = item;
		
		size++;
	}
	
	def Insert(pos: PtrSize, items: CArray<T>) {
		foreach (v, i in items)
			Insert(pos + i, v);
	}
	
	def Insert(pos: PtrSize, items: Vector<T>) {
		foreach (v, i in items)
			Insert(pos + i, v);
	}
	
	def Sort(low: Int, high: Int) {
		if (low >= high)
			return;
	
		val count = high - low;
	
		if (count <= 7) {
			val temp: T = void;
			for (val i = low + 1; i <= high; i++) {
				temp = ptr[i];
				
				val j = i - 1;
				while (temp < ptr[j] && j >= low) {
					ptr[j + 1] = ptr[j];
					j--;
				}
				
				ptr[j + 1] = temp;
			}
			
			return;
		}
		
		val mid = low + count / 2;
		
		Swap(ptr[mid], ptr[low]);
		val i = low + 1;
		val j = high;
		
		while (i <= j) {
			while(i <= j && ptr[i] <= ptr[low])
				i++;
	
			while(i <= j && ptr[j] > ptr[low])
				j--;
	
			if (i < j)
				Swap(ptr[i], ptr[j]);
		}
		
		Swap(ptr[i - 1], ptr[low]);
	
		Sort(low, i - 2);
		Sort(i, high);
	}
	
	def Sort() {
		Sort(0, Int{size - 1});
	}
	
	def SortDec(low: Int, high: Int) {
		if (low >= high)
			return;
	
		val count = high - low;
	
		if (count <= 7) {
			val temp: T = void;
			for (val i = low + 1; i <= high; i++) {
				temp = ptr[i];
				
				val j = i - 1;
				while (temp > ptr[j] && j >= low) {
					ptr[j + 1] = ptr[j];
					j--;
				}
				
				ptr[j + 1] = temp;
			}
			
			return;
		}
		
		val mid = low + count / 2;
		
		Swap(ptr[mid], ptr[low]);
		val i = low + 1;
		val j = high;
		
		while (i <= j) {
			while(i <= j && ptr[i] >= ptr[low])
				i++;
	
			while(i <= j && ptr[j] < ptr[low])
				j--;
	
			if (i < j)
				Swap(ptr[i], ptr[j]);
		}
		
		Swap(ptr[i - 1], ptr[low]);
	
		SortDec(low, i - 2);
		SortDec(i, high);
	}
	
	def SortDec() {
		SortDec(0, Int{size - 1});
	}
	
	func Sum(): T {
		val sum: T = ptr[0];
		
		for (val i = 1p; i < Length; i++)
			sum += ptr[i];
		
		return sum;
	}
}
private {
	val ptr: Ptr<T>;
	val size: PtrSize;
	
	static def Swap(ref f: T, ref s: T) {
		val temp = f;
		f = s;
		s = temp;
	}
}