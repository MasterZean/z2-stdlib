namespace sys.core.lang;

using sys.core.Stream;

class Vector<T: Class> {
	this(copy: Vector<T>) {
		length = copy.length;
		capacity = copy.capacity;
		
		val temp: Ptr<T> = void;
		
		if (T.class.IsPOD) {
			// POD data can just be raw copied by a memory clone
			temp = copy.data.Clone(length);
		}
		else {
			// non POD data gets copied by first allocating a new buffer
			temp = Ptr<T>.AllocVoid(length);
			
			// then copy constructor is called on each member
			for (val i = 0p; i < length; i++)
				temp[i]{copy.data[i]};
		}
		
		data = temp;
	}
	
	def @attr(copy: Vector<T>) {
		// exit early if assigning to self
		if (data == copy.data)
			return;

		// call destructor on non POD elements
		if (!T.class.IsPOD)
			for (val i = 0p; i < length; i++)
				data[i].~{};
		data.Free();

		// forward to copy constructor
		this{copy};
	}
		
	~this() {
		// call destructor on non POD elements
		if (!T.class.IsPOD)
			for (val i = 0p; i < length; i++)
				data[i].~{};
		data.Free();

		length = 0;
		capacity = 0;
	}
	
	this(move copy: Vector<T>) {
		// exit early if assigning to self
		default();
		copy.length = 0;
		copy.data = null;
	}
	
	def @attr(move copy: Vector<T>) {
		// exit early if assigning to self
		if (data != copy.data) {
			this.~{};
		
			default();
			copy.length = 0;
			copy.data = null;
		}
	}
	
	property Length: PtrSize {
		return length;
	}
	set (value) {
		if (value == length)
			return;

		if (value > capacity) {
			Capacity = value;
			val i = length;
			
			while (i < value) {
				data[i]{};
				i++;
			}
		}
		else if (value < length) {
			val i = value;
			
			while (i < length) {
				data[i].~{};
				i++;
			}
		}
		
		length = value;
	}

	property Capacity: PtrSize {
		return capacity;
	}
	set (value) {
		System.Trace.Assert(value >= length);

		val temp = Intrinsic.Max(value, 2p);
		if (temp == capacity)
			return;

        capacity = value;
        
        val back = data;
        
		data = data.Clone(capacity, length);
		
		back.Free();
	}

	property @index: ref T
	get [index: PtrSize] {
		System.Debug.Assert(index < length);
		return data[index];
	}
	
	def Add(item: T) {
		if (length >= capacity)
			Grow();
		data[length++]{item};
	}
	
	def Add(move item: T) {
		if (length >= capacity)
			Grow();
		
		data[length++]{item};
	}
	
	def Add(items: Vector<T>) {
		if (length + items.Length >= capacity)
			Grow(length + items.Length);
		
		for (val iIndex = 0p; iIndex < items.Length; iIndex++)
			data[length++]{items[iIndex]};
	}
	
	def Add(items: CArray<T>) {
		if (length + items.Length >= capacity)
			Grow(length + items.Length);
		
		for (val iIndex = 0p; iIndex < items.Length; iIndex++)
			data[length++]{items[iIndex]};
	}
	
	static def @shl<T: Class>(ref v: Vector<T>, data: T): ref Vector<T> {
		v.Add(data);
		return v;
	}
	
	property At: ref T
	get [index: PtrSize] {
		if (index >= length)
			Length = index + 1;
		return data[index];
	}
	
	def Fill(value: T) {
		for (val i = 0p; i < Length; i++)
			this[i] = value;
	}
	
	def Fill(items: Vector<T>) {
		val s = Slice<T>{this};
		s.Fill(items);
	}
	
	def Fill(items: CArray<T>) {
		val s = Slice<T>{this};
		s.Fill(items);
	}
		
	func FindIndex(item: T): PtrSize {
		val s = Slice<T>{this};
		return s.FindIndex(item);
	}
	
	func FindIndex(item: T, start: PtrSize): PtrSize {
		val s = Slice<T>{this};
		return s.FindIndex(item, start);
	}
	
	func BinaryIndex(item: T): PtrSize {
		val s = Slice<T>{this};
		return s.BinaryIndex(item);
	}
	
	def BinaryIndex(item: T, start: PtrSize): PtrSize {
		val s = Slice<T>{this};
		return s.BinaryIndex(item, start);
	}
	
	def Insert(pos: PtrSize, item: T) {
		while (Intrinsic.Max(pos, length) + 1 >= capacity)
			Grow();
		
		val s = Slice<T>{this};
		s.Insert(pos, item);
		length = s.Length;
	}
	
	def Insert(pos: PtrSize, items: CArray<T>) {
		while (Intrinsic.Max(pos, length) + items.Length >= capacity)
			Grow();
		
		val s = Slice<T>{this};
		s.Insert(pos, items);
		length = s.Length;
	}
	
	def Insert(pos: PtrSize, items: Vector<T>) {
		while (Intrinsic.Max(pos, length) + items.Length >= capacity)
			Grow();
		
		val s = Slice<T>{this};
		s.Insert(pos, items);
		length = s.Length;
	}
	
	def Delete(item: T): PtrSize {
		val s = Slice<T>{this};
		val r = s.Delete(item);
		length = s.Length;
		return r;
	}
	
	def Delete(items: CArray<T>): PtrSize {
		val s = Slice<T>{this};
		val r = s.Delete(items);
		length = s.Length;
		return r;
	}
	
	def Delete(items: Vector<T>): PtrSize {
		val s = Slice<T>{this};
		val r = s.Delete(items);
		length = s.Length;
		return r;
	}
	
	def DeleteAll(item: T): PtrSize {
		val s = Slice<T>{this};
		val r = s.DeleteAll(item);
		length = s.Length;
		return r;
	}
	
	def DeleteAll(item: CArray<T>): PtrSize {
		val s = Slice<T>{this};
		val r = s.DeleteAll(item);
		length = s.Length;
		return r;
	}
	
	def DeleteAll(item: Vector<T>): PtrSize {
		val s = Slice<T>{this};
		val r = s.DeleteAll(item);
		length = s.Length;
		return r;
	}
	
	def DeleteIndex(item: PtrSize): PtrSize {
		val s = Slice<T>{this};
		val r = s.DeleteIndex(item);
		length = s.Length;
		return r;
	}
	
	def DeleteIndex(items: CArray<PtrSize>): PtrSize {
		val s = Slice<T>{this};
		val r = s.DeleteIndex(items);
		length = s.Length;
		return r;
	}
	
	def DeleteIndex(items: Vector<PtrSize>): PtrSize {
		val s = Slice<T>{this};
		val r = s.DeleteIndex(items);
		length = s.Length;
		return r;
	}
	
	def Reverse() {
		val s = Slice<T>{this};
		s.Reverse();
	}
	
	def Reverse(start: PtrSize, end: PtrSize) {
		val s = Slice<T>{this, start, end};
		s.Reverse();
	}
	
	func Sum(): T {
		val s = Slice<T>{this};
		return s.Sum();
	}
	
	def Sort() {
		val s = Slice<T>{this};
		s.Sort();
	}
	
	def Sort(low: Int, high: Int) {
		val s = Slice<T>{this};
		s.Sort(low, high);
	}
	
	def SortDesc() {
		val s = Slice<T>{this};
		s.SortDesc();
	}
	
	def SortDesc(low: Int, high: Int) {
		val s = Slice<T>{this};
		s.SortDesc(low, high);
	}
	
#region IO

	func @write(ref stream: Stream) {
		stream << length;
		
		if (length > 0) {
			stream << ' ';
			for (val i = 0p; i < length - 1; i++)
				stream << data[i] << ' ';
			stream << data[length - 1];
		}
	}
	
#endregion
	
	property SysDataPointer: Ptr<T>
	get {
		return data;
	}
}
private {
	val data: Ptr<T>;
	val length: PtrSize;
	val capacity: PtrSize;
	
	def Grow() {
		val newCap = Intrinsic.Max(capacity * 2, 2p);
		Capacity = newCap;
	}
	
	def Grow(newLen: PtrSize) {
		val newCap = Intrinsic.Max(capacity * 2, 2p);
		if (newCap < newLen)
			newCap = newLen;
		Capacity = newCap;
	}
	
	this @allocate(len: PtrSize, cap: PtrSize) {
		data = Ptr<T>.AllocVoid(cap);
		length = len;
		capacity = cap;
	}
}