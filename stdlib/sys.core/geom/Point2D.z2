namespace sys.core;

class Point2D<T: Class> {
	val X: T;
	val Y: T;

	this(value: T) {
		X = value;
		Y = value;
	}

	this(x: T, y: T) {
		X = x;
		Y = y;
	}

	def Clamp(min: Point2D<T>, max: Point2D<T>) {
		X.Clamp(min.X, max.X);
		Y.Clamp(min.Y, max.Y);
	}
	
	def Clamp(min: T, max: T) {
		X.Clamp(min, max);
		Y.Clamp(min, max);
	}
	
	func Clamped(min: Point2D<T>, max: Point2D<T>): Point2D<T> {
		val c: Point2D<T> = void;

		c.X = X.Clamped(min.X, max.X);
		c.Y = Y.Clamped(min.Y, max.Y);

		return c;
	}
	
	func Clamped(min: T, max: T): Point2D<T> {
		val c: Point2D<T> = void;

		c.X = X.Clamped(min, max);
		c.Y = Y.Clamped(min, max);

		return c;
	}

	func GetMin(min: Point2D<T>): Point2D<T> {
		val c: Point2D<T> = void;

		c.X = X.GetMin(min.X);
		c.Y = Y.GetMin(min.Y);

		return c;
	}

	func GetMax(max: Point2D<T>): Point2D<T> {
		val c: Point2D<T> = void;

		c.X = X.GetMax(max.X);
		c.Y = Y.GetMax(max.Y);

		return c;
	}

	func IsNormalized(tolerance: T): Bool {
		return ((X * X) + (Y * Y) - T{1}).Abs < tolerance;
	}

	property Length: T {
		return ((X * X) + (Y * Y)).Sqrt;
	}

	property LengthSquared: T {
		return (X * X) + (Y * Y);
	}

	def Normalize(tolerance: T) {
		val length = Length;
		if (length > tolerance) {
			val inv = T{1} / length;
			X *= inv;
			Y *= inv;
		}
	}

	func Normalized(tolerance: T): Point2D<T> {
		val t = this;
		val length = Length;
		if (length > tolerance) {
			val inv = T{1} / length;
			t.X *= inv;
			t.Y *= inv;
		}
		return t;
	}

#region op

	func @add(second: Point2D<T>): Point2D<T> {
		return Point2D<T>{X + second.X, Y + second.Y};
	}

	func @add(second: T): Point2D<T> {
		return Point2D<T>{X + second, Y + second};
	}

	static func @sub(left: Point2D<T>, right: Point2D<T>): Point2D<T> {
		return Point2D<T>{left.X - right.X, left.Y - right.Y};
	}

	static func @sub(left: Point2D<T>, right: T): Point2D<T> {
		return Point2D<T>{left.X - right, left.Y - right};
	}

	static func @sub(left: T, right: Point2D<T>): Point2D<T> {
		return Point2D<T>{left - right.X, left - right.Y};
	}

	func @mul(second: Point2D<T>): Point2D<T> {
		return Point2D<T>{X * second.X, Y * second.Y};
	}

	func @mul(second: T): Point2D<T> {
		return Point2D<T>{X * second, Y * second};
	}

	static func @div(left: Point2D<T>, right: Point2D<T>): Point2D<T> {
		return Point2D<T>{left.X / right.X, left.Y / right.Y};
	}

	static func @div(left: Point2D<T>, right: T): Point2D<T> {
		return Point2D<T>{left.X / right, left.Y / right};
	}

	static func @div(left: T, right: Point2D<T>): Point2D<T> {
		return Point2D<T>{left / right.X, left / right.Y};
	}

	static func @mod(left: Point2D<T>, right: Point2D<T>): Point2D<T> {
		return Point2D<T>{left.X % right.X, left.Y % right.Y};
	}

	static func @mod(left: Point2D<T>, right: T): Point2D<T> {
		return Point2D<T>{left.X % right, left.Y % right};
	}

	static func @mod(left: T, right: Point2D<T>): Point2D<T> {
		return Point2D<T>{left % right.X, left % right.Y};
	}

	func @minus(): Point2D<T> {
		return Point2D<T>{-X, -Y};
	}
	
	func @eq(second: T): Bool {
		return X == second && Y == second;
	}

	func @neq(second: T): Bool {
		return X != second || Y != second;
	}

#endregion

	func Equals(second: Point2D<T>, tolerance: T): Bool {
		return (X - second.X).Abs < tolerance && (Y - second.Y).Abs < tolerance;
	}

	func Equals(second: T, tolerance: T): Bool {
		return (X - second).Abs < tolerance && (Y - second).Abs < tolerance;
	}
}

alias Point2Di = Point2D<Int>;
alias Point2Du = Point2D<DWord>;
alias Point2Df = Point2D<Float>;
alias Point2Dd = Point2D<Double>;