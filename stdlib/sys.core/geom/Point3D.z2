namespace sys.core;

using Point2D;


class Point3D<T: Class> {
	val X: T;
	val Y: T;
	val Z: T;

	this(value: T) {
		X = value;
		Y = value;
		Z = value;
	}

	this(x: T, y: T, z: T) {
		X = x;
		Y = y;
		Z = z;
	}

	this(p2d: Point2D<T>, z: T) {
		X = p2d.X;
		Y = p2d.Y;
		Z = z;
	}

	def Clamp(min: Point3D<T>, max: Point3D<T>) {
		X.Clamp(min.X, max.X);
		Y.Clamp(min.Y, max.Y);
		Z.Clamp(min.Z, max.Z);
	}

	def Clamp(min: T, max: T) {
		X.Clamp(min, max);
		Y.Clamp(min, max);
		Z.Clamp(min, max);
	}
	
	func Clamped(min: Point3D<T>, max: Point3D<T>): Point3D<T> {
		val c: Point3D<T> = void;

		c.X = X.Clamped(min.X, max.X);
		c.Y = Y.Clamped(min.Y, max.Y);
		c.Z = Z.Clamped(min.Z, max.Z);

		return c;
	}
	
	func Clamped(min: T, max: T): Point2D<T> {
		val c: Point3D<T> = void;

		c.X = X.Clamped(min, max);
		c.Y = Y.Clamped(min, max);
		c.Z = Z.Clamped(min, max);

		return c;
	}
	
	func GetMin(min: Point3D<T>): Point3D<T> {
		val c: Point3D<T> = void;

		c.X = X.GetMin(min.X);
		c.Y = Y.GetMin(min.Y);
		c.Z = Z.GetMin(min.Z);

		return c;
	}

	func GetMax(max: Point3D<T>): Point3D<T> {
		val c: Point3D<T> = void;

		c.X = X.GetMax(max.X);
		c.Y = Y.GetMax(max.Y);
		c.Z = Z.GetMax(max.Z);

		return c;
	}

	func IsNormalized(tolerance: T): Bool {
		return ((X * X) + (Y * Y) + (Z * Z) - T{1}).Abs < tolerance;
	}

	property Length: T
	get {
		return ((X * X) + (Y * Y) + (Z * Z)).Sqrt;
	}

	property LengthSquared: T
	get {
		return (X * X) + (Y * Y) + (Z * Z);
	}

	def Normalize(tolerance: T) {
		val length = Length;
		if (length > tolerance) {
			val inv = T{1} / length;
			X *= inv;
			Y *= inv;
			Z *= inv;
		}
	}

	func Normalized(tolerance: T): Point3D<T> {
		val t = this;
		val length = Length;
		if (length > tolerance) {
			val inv = T{1} / length;
			t.X *= inv;
			t.Y *= inv;
			t.Z *= inv;
		}
		return t;
	}

#region op

	func @add(second: Point3D<T>): Point3D<T> {
		return Point3D<T>{X + second.X, Y + second.Y, Z + second.Z};
	}

	func @add(second: T): Point3D<T> {
		return Point3D<T>{X + second, Y + second, Z + second};
	}

	static func @sub(left: Point3D<T>, right: Point3D<T>): Point3D<T> {
		return Point3D<T>{left.X - right.X, left.Y - right.Y, left.Z - right.Z};
	}

	static func @sub(left: Point3D<T>, right: T): Point3D<T> {
		return Point3D<T>{left.X - right, left.Y - right, left.Z - right};
	}

	static func @sub(left: T, right: Point3D<T>): Point3D<T> {
		return Point3D<T>{left - right.X, left - right.Y, left - right.Z};
	}

	func @mul(second: Point3D<T>): Point3D<T> {
		return Point3D<T>{X * second.X, Y * second.Y, Z * second.Z};
	}

	func @mul(second: T): Point3D<T> {
		return Point3D<T>{X * second, Y * second, Z * second};
	}

	static func @div(left: Point3D<T>, right: Point3D<T>): Point3D<T> {
		return Point3D<T>{left.X / right.X, left.Y / right.Y, left.Z / right.Z};
	}

	static func @div(left: Point3D<T>, right: T): Point3D<T> {
		return Point3D<T>{left.X / right, left.Y / right, left.Z / right};
	}

	static func @div(left: T, right: Point3D<T>): Point3D<T> {
		return Point3D<T>{left / right.X, left / right.Y, left / right.Z};
	}

	static func @mod(left: Point3D<T>, right: Point3D<T>): Point3D<T> {
		return Point3D<T>{left.X % right.X, left.Y % right.Y, left.Z % right.Z};
	}

	static func @mod(left: Point3D<T>, right: T): Point3D<T> {
		return Point3D<T>{left.X % right, left.Y % right, left.Z % right};
	}

	static func @mod(left: T, right: Point3D<T>): Point3D<T> {
		return Point3D<T>{left % right.X, left % right.Y, left % right.Z};
	}

	func @minus(): Point3D<T> {
		return Point3D<T>{-X, -Y, -Z};
	}
	
	func @eq(second: T): Bool {
		return X == second && Y == second && Z == second;
	}

	func @neq(second: T): Bool {
		return X != second || Y != second || Z != second;
	}

#endregion

	func Equals(second: Point3D<T>, tolerance: T): Bool {
		return (X - second.X).Abs < tolerance && (Y - second.Y).Abs < tolerance  && (Z - second.Z).Abs < tolerance;
	}

	func Equals(second: T, tolerance: T): Bool {
		return (X - second).Abs < tolerance && (Y - second).Abs < tolerance && (Z - second).Abs < tolerance;
	}
}

alias Point3Di = Point3D<Int>;
alias Point3Du = Point3D<DWord>;
alias Point3Df = Point3D<Float>;
alias Point3Dd = Point3D<Double>;