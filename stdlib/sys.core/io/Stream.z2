using sys.core.ConvertUtf8;
using sys.core.OutputFormat;

namespace sys.core;

class Stream {
	def BinPut(ref data: ReadSlice<Byte>) {
		if (ptr + data.Length <= wrlim) {
			Intrinsic.MemCopy(ptr, data.SysDataPointer, data.Length);
			ptr = ptr + data.Length;
		}
		else
			BinPutImpl(data);
	}

	def BinGet(ref data: Slice<Byte>) {
		if (ptr + data.Length <= rdlim) {
			Intrinsic.MemCopy(data.SysDataPointer, ptr, data.Length);
			ptr = ptr + data.Length;
		}
		else
			BinGetImpl(data);
	}

#region RawWrite

	virtual def RawWrite(data: Bool) {
		if (data == false)
			RawWrite("false");
		else
			RawWrite("true");
	}
	
	virtual def RawWrite(data: Bool, format: OutputFormat) {
		if (data == false)
			RawWrite("false", format);
		else
			RawWrite("true", format);
	}

	virtual def RawWrite(data: Char) {
		val buf: CArray<Byte, ConvertUtf8.MaxCharBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.CharAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: Char, format: OutputFormat) {
		val buf: CArray<Byte, ConvertUtf8.MaxCharBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.CharAsText(s, data);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data: Int) {
		val buf: CArray<Byte, ConvertUtf8.MaxIntBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.IntAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: Int, format: OutputFormat) {
		val buf: CArray<Byte, ConvertUtf8.MaxBinIntBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.IntAsText(s, data, format.Base);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data: DWord) {
		val buf: CArray<Byte, ConvertUtf8.MaxDWordBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DWordAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: DWord, format: OutputFormat) {
		val buf: CArray<Byte, ConvertUtf8.MaxBinDWordBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DWordAsText(s, data, format.Base);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data: Long) {
		val buf: CArray<Byte, ConvertUtf8.MaxLongBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.LongAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: Long, format: OutputFormat) {
		val buf: CArray<Byte, ConvertUtf8.MaxBinLongBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.LongAsText(s, data, format.Base);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data: QWord) {
		val buf: CArray<Byte, ConvertUtf8.MaxQWordBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.QWordAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: QWord, format: OutputFormat) {
		val buf: CArray<Byte, ConvertUtf8.MaxBinQWordBuffer> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.QWordAsText(s, data, format.Base);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data: Float) {
		val buf: CArray<Byte, 45> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.FloatAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: Float, format: OutputFormat) {
		val buf: CArray<Byte, 45> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.FloatAsText(s, data);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data: Double) {
		val buf: CArray<Byte, 315> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DoubleAsText(s, data);
		BinPut(s);
	}
	
	virtual def RawWrite(data: Double, format: OutputFormat) {
		val buf: CArray<Byte, 315> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DoubleAsText(s, data);
		FormatBuffer(s, format);
	}

	virtual def RawWrite(data7: String) {
		val sss = ReadSlice<Byte>{data7};
		BinPut(sss);
	}
	
	virtual def RawWrite(data: String, format: OutputFormat) {
		val s = ReadSlice<Byte>{data};
		FormatBuffer(s, format);
	}

#endregion

#region RawPut

	def RawPutS8(data: Int) {
		val s = ReadSlice<Byte>{data, 1p};
		BinPut(s);
	}
	
	def RawPutS8(data: Long) {
		val s = ReadSlice<Byte>{data, 1p};
		BinPut(s);
	}

	def RawPutU8(data: DWord) {
		val s = ReadSlice<Byte>{data, 1p};
		BinPut(s);
	}

	def RawPutU8(data: QWord) {
		val s = ReadSlice<Byte>{data, 1p};
		BinPut(s);
	}

	def RawPutS16(data: Int) {
		val s = ReadSlice<Byte>{data, 2p};
		BinPut(s);
	}
	
	def RawPutS16(data: Long) {
		val s = ReadSlice<Byte>{data, 2p};
		BinPut(s);
	}

	def RawPutU16(data: DWord) {
		val s = ReadSlice<Byte>{data, 2p};
		BinPut(s);
	}

	def RawPutU16(data: QWord) {
		val s = ReadSlice<Byte>{data, 2p};
		BinPut(s);
	}

	def RawPutS32(data: Int) {
		val s = ReadSlice<Byte>{data, 4p};
		BinPut(s);
	}
	
	def RawPutS32(data: Long) {
		val s = ReadSlice<Byte>{data, 4p};
		BinPut(s);
	}

	def RawPutU32(data: DWord) {
		val s = ReadSlice<Byte>{data, 4p};
		BinPut(s);
	}
	
	def RawPutU32(data: QWord) {
		val s = ReadSlice<Byte>{data, 4p};
		BinPut(s);
	}

	def RawPutS64(data: Long) {
		val s = ReadSlice<Byte>{data, 8p};
		BinPut(s);
	}

	def RawPutU64(data: QWord) {
		val s = ReadSlice<Byte>{data, 8p};
		BinPut(s);
	}

	def RawPutF32(data: Float) {
		val s = ReadSlice<Byte>{data, 4p};
		BinPut(s);
	}
	
	def RawPutF64(data: Double) {
		val s = ReadSlice<Byte>{data, 8p};
		BinPut(s);
	}

#endregion

#region RawGet

	def RawGetS8(): Small {
		val temp: Small = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetU8(): Byte {
		val temp: Byte = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetS16(): Short {
		val temp: Short = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetU16(): Word {
		val temp: Word = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetS32(): Int {
		val temp: Int = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetU32(): DWord {
		val temp: DWord = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetF32(): Float {
		val temp: Float = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetS64(): Long {
		val temp: Long = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetU64(): QWord {
		val temp: QWord = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

	def RawGetF64(): Double {
		val temp: Double = void;
		val s = Slice<Byte>{temp};
		BinGet(s);
		return temp;
	}

#endregion

#region High

	def Write<T: Class>(data: T): ref Stream {
		data.@write(this);
		return this;
	}
	
	def Write<T: Class>(data: T, format: OutputFormat): ref Stream {
		data.@write(this, format);
		return this;
	}
	
	def Read<T: Class>(ref data: T): ref Stream {
		data.@read(this);
		return this;
	}

	def @shl<T: Class>(data: T): ref Stream {
		data.@write(this);
		return this;
	}
	
	static def @shr<T: Class>(ref s: Stream, ref data: T): ref Stream {
		data.@read(s);
		return s;
	}

	def Put<T: Class>(data: T): ref Stream {
		data.@put(this);
		return this;
	}
	
	def Get<T: Class>(ref data: T): ref Stream {
		data.@get(this);
		return this;
	}

#endregion
		
	def FormatBuffer(ref s: ReadSlice<Byte>, format: OutputFormat) {
		if (format.Width != 0 && format.Width < s.Length) {
			val s2 = ReadSlice<Byte>{s, s.Length - PtrSize{format.Width}, PtrSize{format.Width}};
			BinPut(s2);
		}
		else if (format.Width > s.Length) {
			if (format.Align == sys.core.LineAlignment.Right) {
				val left = format.Width - s.Length;
				
				val reduce = format.ForceSign && s[0] != '+' && s[0] != '-';
				
				if (reduce)
					left--;
				
				// pad left
				while (left > 0) {
					val buf: CArray<Byte, ConvertUtf8.MaxCharBuffer> = void;
					val slice = Slice<Byte>{buf};
					ConvertUtf8.CharAsText(slice, format.FillBefore);
					BinPut(slice);
					left--;
				}
				
				// write sign
				if (reduce) {
					val buf = Byte{'+'};
					val slice = ReadSlice<Byte>{buf};
					BinPut(slice);
				}
				
				// write buffer
				BinPut(s);
			}
			else if (format.Align == sys.core.LineAlignment.Left) {
			    val right = format.Width - s.Length;
				val reduce = format.ForceSign && s[0] != '+' && s[0] != '-';
				
				// write sign
				if (reduce) {
					right--;
					val buf = Byte{'+'};
					val slice = ReadSlice<Byte>{buf};
					BinPut(slice);
				}
				
				// write buffer
				BinPut(s);
				
				// pad right
				while (right > 0) {
					val buf: CArray<Byte, ConvertUtf8.MaxCharBuffer> = void;
					val slice = Slice<Byte>{buf};
					ConvertUtf8.CharAsText(slice, format.FillAfter);
					BinPut(slice);
					right--;
				}
			}
			else {
				val left = (format.Width - s.Length) / 2;
				val right = format.Width - s.Length - left;
				
				val reduce = format.ForceSign && s[0] != '+' && s[0] != '-';
				
				if (reduce)
					right--;
				
				// pad left
				while (left > 0) {
					val buf: CArray<Byte, ConvertUtf8.MaxCharBuffer> = void;
					val slice = Slice<Byte>{buf};
					ConvertUtf8.CharAsText(slice, format.FillBefore);
					BinPut(slice);
					left--;
				}
				
				// write sign
				if (reduce) {
					val buf = Byte{'+'};
					val slice = ReadSlice<Byte>{buf};
					BinPut(slice);
				}
				
				// write buffer
				BinPut(s);
				
				// pad right
				while (right > 0) {
					val buf: CArray<Byte, ConvertUtf8.MaxCharBuffer> = void;
					val slice = Slice<Byte>{buf};
					ConvertUtf8.CharAsText(slice, format.FillAfter);
					BinPut(slice);
					right--;
				}
			}
		}
		else
			BinPut(s);
	}

	def SetError(code: Int) {
		style = style | STRM_ERROR;
		errorcode = code;
	}

	property HasError: Bool {
		return (style & STRM_ERROR) != 0;
	}

	property IsLoading: Bool {
		return (style & STRM_LOADING) != 0;
	}

	property IsStoring: Bool {
		return !IsLoading;
	}

	const STRM_ERROR   =  0x20;
	const STRM_READ    =  0x10;
	const STRM_WRITE   =  0x08;
	const STRM_SEEK    =  0x04;
	const STRM_LOADING =  0x02;
	const STRM_THROW   =  0x01;

	const ERROR_NOT_ENOUGH_SPACE = -1;
	const ERROR_LOADING_FAILED   = -2;
}
protected {
	val pos: PtrSize;
	val buffer: Ptr<Byte>;
	val ptr: Ptr<Byte>;
	val rdlim: Ptr<Byte>;
	val wrlim: Ptr<Byte>;

	val style = 0;
	val errorcode = 0;

	virtual def BinPutImpl(ref data: ReadSlice<Byte>) {
		SetError(ERROR_NOT_ENOUGH_SPACE);
	}

	virtual def BinGetImpl(ref data: Slice<Byte>): Int {
		return -1;
	}
}
