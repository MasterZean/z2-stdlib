namespace sys.core.lang;

using sys.core.Stream;
using sys.core.Math;
using sys.core.OutputFormat;
using sys.core.ConvertUtf8;

class Float {
	const Zero: Float = 0;
	const One: Float = 1;

	const Min: Float = -3.40282e+38f;
	const Max: Float = 3.40282e+38f;

	const IsSigned = true;
	const IsInteger = false;

	const MaxDigitsLow = 6;
	const MaxDigitsHigh = 9;
	
	const Nan = Float{1.0e+300 * 1.0e+300} * 0.0f;
	const Infinite = Float{1.0e+300 * 1.0e+300};
	
	property IsNan: Bool {
		return this != this;
	}
	
	property IsInfinite: Bool {
		return this == Infinite || this == -Infinite;
	}

	property Abs: Float {
		return this > 0 ? this : -this;
	}

	property Sqr: Float {
		return this * this;
	}

	property Sqrt: Float get = Intrinsic.Sqrt;

	property Floor: Float get = Intrinsic.Floor;

	property Ceil: Float get = Intrinsic.Ceil;

	property Round: Float get = Intrinsic.Round;

	def Clamp(min: Float, max: Float) = Intrinsic.Clamp;
	
	func Clamped(min: Float, max: Float): Float = Intrinsic.Clamped;

#region Math

	property Sin  : Float get = Math.Sin;
	property Cos  : Float get = Math.Cos;
	property Tan  : Float get = Math.Tan;
	
	property Sinh : Float get = Math.Sinh;
	property Cosh : Float get = Math.Cosh;
	property Tanh : Float get = Math.Tanh;
	
	property Asin : Float get = Math.Asin;
	property Acos : Float get = Math.Acos;
	property Atan : Float get = Math.Atan;
	
	property Asinh: Float get = Math.Asinh;
	property Acosh: Float get = Math.Acosh;
	property Atanh: Float get = Math.Atanh;
	
	property Log  : Float get = Math.Log;
	property Log2 : Float get = Math.Log2;
	property Log10: Float get = Math.Log10;

	func Pow(exp: Float): Float = Intrinsic.Pow;

#endregion

#region ToString

	func ToString(): String {
		val buf: CArray<Byte, 320> = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.DoubleAsText(s, this);
		return String{s};
	}

#endregion

#region Saturation

	this Saturated(value: Float) {
		this = value;
	}
	
	this Saturated(value: Double) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Int{value};
	}
#endregion
	
#region IO

	func @write(ref stream: Stream) {
		stream.RawWrite(this);
	}

	func @write(ref stream: Stream, format: OutputFormat) {
		stream.RawWrite(this, format);
	}
	
	func @put(ref stream: Stream) {
		stream.RawPutF32(this);
	}

	def @get(ref stream: Stream) {
		this = stream.RawGetF32();
	}
	
#endregion
}