using sys.core.ConvertUtf8;
using sys.core.Stream;
using sys.core.OutputFormat;

namespace sys.core.lang;

class Long {
	const Zero: Long = 0;
	const One: Long = 1;

	const Min: Long = -9'223'372'036'854'775'808l;
	const Max: Long = 9'223'372'036'854'775'807l;

	const IsSigned = true;
	const IsInteger = true;
	
	const MaxDigitsLow = 19;
	const MaxDigitsHigh = 19;

	property Abs: Long {
		return this > 0 ? this : -this;
	}
	
	property Sqr: Long {
		return this * this;
	}

	property Sqrt: Long {
		return Long{Double{this}.Sqrt};
	}

	property Floor: Long {
		return this;
	}

	property Ceil: Long {
		return this;
	}

	property Round: Long {
		return this;
	}
	
	def Clamp(min: Long, max: Long); Intrinsic.Clamp;
	
	def Clamped(min: Long, max: Long): Long; const Intrinsic.Clamped;

	this(const string: String) {
		val s = Slice<Byte>{string};
		this = ConvertUtf8.ParseSig<Long>(s);
	}
	
	def ToString(): String; const {
		val buf: [c ConvertUtf8.MaxLongBuffer]Byte = void;
		val s = Slice<Byte>{buf};
		ConvertUtf8.LongAsText(s, this);
		return String{s};
	}

#region Saturation

	this Saturated(value: Long) {
		this = value;
	}

	this Saturated(value: QWord) {
		this = value > QWord{Max} ? Max : Long{value};
	}

	this Saturated(value: Double) {
		if (value > Max)
			this = Max;
		else if (value < Min)
			this = Min;
		else
			this = Long{value};
	}
	
	this Saturated(const string: String) {
		val s = Slice<Byte>{string};
		this = ConvertUtf8.ParseSigSaturated<Long>(s);
	}

#endregion

#region IO

	def @write(ref stream: Stream); const {
		stream.RawWrite(this);
	}

	def @write(ref stream: Stream, const format: OutputFormat); const {
		stream.RawWrite(this, format);
	}
	
	def @put(ref stream: Stream); const {
		stream.RawPutS64(this);
	}

	def @get(ref stream: Stream) {
		this = stream.RawGetS64();
	}

#endregion
}