using sys.core.Stream;

namespace sys.core.lang;

class PtrSize {
	const Zero: PtrSize = 0;
	const One: PtrSize = 1;
	
	const Min: PtrSize = PtrSize{DWord.Min};
	const Max: PtrSize = PtrSize{DWord.Max};

	const IsSigned = false;
	const IsInteger = true;
	
	const MaxDigitsLow = 9;
	const MaxDigitsHigh = 10;
	
	property Abs: PtrSize {
		return this;
	}
	
	property Sqr: PtrSize {
		return this * this;
	}

	property Sqrt: PtrSize {
		return PtrSize{Double{this}.Sqrt};
	}

	property Floor: PtrSize {
		return this;
	}

	property Ceil: PtrSize {
		return this;
	}

	property Round: PtrSize {
		return this;
	}
	
	def Clamp(min: PtrSize, max: PtrSize); Intrinsic.Clamp;
	
	def Clamped(min: PtrSize, max: PtrSize): PtrSize; const Intrinsic.Clamped;

	def @write(ref stream: Stream); const {
		if (sys.core.Compiler.Bits == 32)
			stream.RawWrite(DWord{this});
		else if (sys.core.Compiler.Bits == 64)
			stream.RawWrite(QWord{this});
		else
			System.Trace.Error("Only 32 or 64 bit systems are supported right now!");
	}
	
	def @put(ref stream: Stream); const {
		if (sys.core.Compiler.Bits == 32)
			stream.RawPutU32(DWord{this});
		else if (sys.core.Compiler.Bits == 64)
			stream.RawPutU64(QWord{this});
		else
			System.Trace.Error("Only 32 or 64 bit systems are supported right now!");
	}

	def @get(ref stream: Stream) {
		if (sys.core.Compiler.Bits == 32)
			this = PtrSize{stream.RawGetU32()};
		else if (sys.core.Compiler.Bits == 64)
			this = PtrSize{stream.RawGetU64()};
		else
			System.Trace.Error("Only 32 or 64 bit systems are supported right now!");
	}
}
