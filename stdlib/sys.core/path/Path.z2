namespace sys.core;

using sys.core.ConvertUtf8;
using sys.core.ConvertUtf16;
using microsoft.windows.Win32;

class Path {
    
#if Compiler.Platform == "WIN32"
	const DirSep = DirSepWin;
	const IgnoreCase = true;
#else
    const DirSep = DirSepUnix;
	const IgnoreCase = false;
#endif

	const DirSepWin = '\\';
	const DirSepUnix = '/';

#if Compiler.Platform == "WIN32"

	static property CurrentFolder: String {
		val pathu16: CArray<Word, Win32.MAX_PATH> = void;
		val written = PtrSize{Win32.GetCurrentDirectoryW(Win32.MAX_PATH, pathu16.SysDataPointer)};
		val source = ReadSlice<Word>{pathu16, written};
		
		val pathu8: CArray<Byte, Win32.MAX_PATH * 4 + 1> = void;
		val dest = Slice<Byte>{pathu8};
		
		ConvertUtf8.FromUtf16(dest, source);
		if (pathu8[dest.Length - 1] != DirSep) {
			pathu8[dest.Length] = Byte{DirSep};
			dest.Length = dest.Length + 1;
			pathu8[dest.Length + 1] = Byte{'\0'};
		}
		
		return String{dest};
	}
	set (dir) {
		val source = ReadSlice<Byte>{dir};
		
		val pathu16: CArray<Word, Win32.MAX_PATH> = void;
		val dest = Slice<Word>{pathu16};
		
		ConvertUtf16.FromUtf8(dest, source);
		pathu16[dest.Length] = Word{'\0'};
		
		val result = Win32.SetCurrentDirectoryW(pathu16.SysDataPointer);
	}
	
#else

	static property CurrentFolder: String {
		val pathu8: CArray<Byte, 1025> = void;
		
		ieee.posix.Posix.getcwd(pathu8.SysDataPointer, 1024);
		
		return String{pathu8.SysDataPointer, bind.c.string.strlen(pathu8.SysDataPointer)};
	}
	set (dir) {
		ieee.posix.Posix.chdir(dir.SysDataPointer);
	}
	
#endif

#if Compiler.Platform == "WIN32"

	static property ExeFileName: String	{
		val pathu16: CArray<Word, Win32.MAX_PATH> = void;
		val written = PtrSize{Win32.GetModuleFileNameW(0, pathu16.SysDataPointer, Win32.MAX_PATH)};
		val source = Slice<Word>{pathu16, written};
		
		val pathu8: CArray<Byte, Win32.MAX_PATH * 4 + 1> = void;
		val dest = Slice<Byte>{pathu8};
		
		ConvertUtf8.FromUtf16(dest, source);
		
		return String{dest};
	}
	
#else

	static property ExeFileName: String {
		if (System.Args.Length > 0)
			return System.Args[0];
		else
			return "";
	}
	
#endif

	static def GetFolder(path: String): String {
		val index = path.RFind(CArray[Byte{DirSepWin}, Byte{DirSepUnix}]);
		if (index == -1)
			return "";
		else
			return String{path, index + 1};
	}

	static def GetFolderNoSep(path: String): String {
		val index = path.RFind(CArray[Byte{DirSepWin}, Byte{DirSepUnix}]);
		if (index == -1)
			return "";
		else
			return String{path, index};
	}

	static def GetName(path: String): String {
		return String.FromIndex{path, GetNameIndex(path)};
	}

	static def GetNameIndex(path: String): PtrSize {
		val index = path.RFind(CArray[Byte{DirSepWin}, Byte{DirSepUnix}]);
		if (index == -1) {
			if (IsRoot(path))
				return PtrSize{-1};
			else
				return 0;
		}
		else
			return index + 1;
	}
	
	static def GetTitle(path: String): String {
		val index = GetTitleIndex(path);
		if (index != -1) {
			val pointIndex = path.RFind(Byte{'.'}, index);
			if (pointIndex == -1)
				return String.FromIndex{path, index};
			else
				return String.FromIndex{path, index, pointIndex - 1};
		}
		else
			return "";
	}

	static def GetTitleIndex(path: String): PtrSize {
		return GetNameIndex(path);
	}
	
	static def GetExtension(path: String): String {
		return String.FromIndex{path, GetExtensionIndex(path)};
	}

	static def GetExtensionIndex(path: String): PtrSize {
		val index = GetNameIndex(path);
		
		if (index != -1) {
			index = path.RFind(Byte{'.'}, index);
			return (index == -1) ? index : index + 1;
		}
		
		return index;
	}
	
	static def GetParent(path: String): String {
		if (path[path.Length - 1] == DirSepWin || path[path.Length - 1] == DirSepUnix)
			return GetFolder(GetFolderNoSep(path));
		else
			return GetFolder(path);
	}

	static def IsRoot(path: String): Bool {
		return (path.Length == 1 && (path[0] == DirSepWin || path[0] == DirSepUnix)) ||
		       (path.Length == 2 && Char{path[0]}.IsAsciiAlpha && path[1] == ':') ||
		       (path.Length == 3 && Char{path[0]}.IsAsciiAlpha && path[1] == ':' && (path[2] == DirSepWin || path[2] == DirSepUnix));
	}
}
