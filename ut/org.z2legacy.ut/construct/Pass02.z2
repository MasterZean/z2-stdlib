namespace org.z2legacy.ut.con02;

class TestCon {
	def @main() {
		System.Out << "* 1" << '\n';
		val a = Foo{};
		System.Out << a << '\n';
		
		System.Out << "* 2" << '\n';
		val b = fun();
		System.Out << b << '\n';
		
		System.Out << "* 3" << '\n';
		val c = Foo{6};
		System.Out << c << '\n';
		
		System.Out << "* 4" << '\n';
		val d = Foo.Named{};
		System.Out << d << '\n';
		
		System.Out << "* 5" << '\n';
		val e = Foo.Named{20};
		System.Out << e << '\n';
		
		System.Out << "* 6" << '\n';
		val tt = CArray[0, 1, 2];
		val f = fun(tt);
		System.Out << f << '\n';
		
		System.Out << "* 7" << '\n';
		val g = fun2(tt);
		System.Out << g << '\n';

		System.Out << "* end" << '\n';
	}
	
	def fun(): Foo {
		return Foo{};
	}
			
	def fun(a: CArray<Int>): Foo {
		for (val i = 0p; i < a.Length; i++)
			if (a[i] == 7)
				return Foo{56};
			else if (a[i] == 8)
				return Foo{23};
		return Foo{42};
	}
	
	def fun2(a: CArray<Int>): Foo {
		val temp = Foo{7};
		for (val i = 0p; i < a.Length; i++)
			if (a[i] == 7)
				temp = Foo{56};
			else if (a[i] == 8)
				temp = Foo{23};
		return temp;
	}
}
		
class Foo {
	this() {
		System.Out << "default\n";
	}
	
	this(a: Int) {
		this.a = a;
		b = a;
		System.Out << "default Int\n";
	}
	
	this Named() {
		System.Out << "named\n";
	}
	
	this Named(a: Int) {
		this.a = a;
		b = a;
		System.Out << "named Int\n";
	}

	this(obj: Foo) {
		default();
		System.Out << "copy construct\n";
	}

	def @attr(obj: Foo) {
		default();
		System.Out << "assign\n";
	}
	
	this(move obj: Foo) {
		default();
		System.Out << "move construct\n";
	}
	
	def @attr(move obj: Foo) {
		default();
		System.Out << "move\n";
	}

	~this() {
		System.Out << "destruct\n";
	}
	
	val a = 0;
	val b = 0;
}